{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "datastore:v1beta3",
  "name": "datastore",
  "version": "v1beta3",
  "revision": "0",
  "title": "Google Cloud Datastore API - NEW",
  "description": "Google Cloud Datastore is a schemaless NoSQL datastore providing robust, scalable storage for your application.\n",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "https://cloud.google.com/datastore/",
  "protocol": "rest",
  "rootUrl": "https://datastore.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://datastore.googleapis.com/",
  "batchPath": "batch",
  "version_module": "True",
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "bearer_token": {
      "type": "string",
      "description": "OAuth bearer token.",
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "pp": {
      "type": "boolean",
      "description": "Pretty-print response.",
      "default": "true",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/datastore": {
          "description": "View and manage your Google Cloud Datastore data"
        }
      }
    }
  },
  "schemas": {
    "ExportRequest": {
      "id": "ExportRequest",
      "description": "The request for google.datastore.v1beta3.DatastoreAdmin.Export.",
      "type": "object",
      "properties": {
        "databaseId": {
          "description": "Database ID against which to make the request.\nUnset indicates the default database.\nNot currently supported.",
          "type": "string"
        },
        "labels": {
          "description": "Client-assigned labels.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "entityFilter": {
          "description": "Description of what data from the Project is included in the export.\n",
          "$ref": "EntityFilter"
        },
        "destination": {
          "description": "Location for the export metadata and data files.\n\nSpecified as the full resource name of the external storage location.\nCurrently, only Google Cloud Storage is supported.  So the destination\nshould be of the form: \/\/storage.googleapis.com\/buckets\/bucket-name or\n\/\/storage.googleapis.com\/buckets\/bucket-name\/objects\/object-path.\n\nThe resulting files will be nested deeper than the specified destination.\nThe final data location will be provided in the\ngoogle.datastore.v1beta3.ExportResponse.data_location field.  That\nvalue should be used for subsequent Import Operations.\n\nBy nesting the data files deeper, the same destination can be used in\nmultiple Export Operations without conflict.",
          "type": "string"
        }
      }
    },
    "EntityFilter": {
      "id": "EntityFilter",
      "description": "Identifies a subset of Entities in a Project.  This is specified as\ncombinations of Kind + Namespace (either or both of which may be all as\ndescribed in the following examples).\nExample usage:\n\nEntire Project:\n  kinds=[], namespace_ids=[]\n\nKinds Foo and Bar in all Namespaces:\n  kinds=['Foo', 'Bar'], namespace_ids=[]\n\nKinds Foo and Bar only in the Default Namespace:\n  kinds=['Foo', 'Bar'], namespace_ids=['']\n\nKinds Foo and Bar in both the Default and Baz Namespaces:\n  kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz']\n\nThe entire Baz Namespace:\n  kinds=[], namespace_ids=['Baz']",
      "type": "object",
      "properties": {
        "kinds": {
          "description": "If empty, then this represents all Kinds.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "namespaceIds": {
          "description": "An empty list represents all Namespaces.  This is the preferred\nusage for Projects that don't use Namespaces.\n\nAn empty string element represents the Default Namespace.  This should be\nused if the Project has data in non-Default Namespaces, but doesn't want to\ninclude them.\nEach Namespace in this list must be unique.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Operation": {
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping above, the\n`name` should have the format of `operations\/some\/unique\/name`.",
          "type": "string"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @ype with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress.\nIf true, the operation is completed, and either `error` or `response` is\navailable.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure.",
          "$ref": "Status"
        },
        "response": {
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`\/`Create`\/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @ype with type URL."
          }
        }
      }
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https:\/\/github.com\/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` which can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting purpose.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security\/privacy reasons.",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There will be a\ncommon set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @ype with type URL."
            }
          }
        }
      }
    },
    "ImportRequest": {
      "id": "ImportRequest",
      "description": "The request for google.datastore.v1beta3.DatastoreAdmin.Import.",
      "type": "object",
      "properties": {
        "databaseId": {
          "description": "Database ID against which to make the request.\nUnset indicates the default database.\nNot currently supported.",
          "type": "string"
        },
        "labels": {
          "description": "Client-assigned labels.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "dataLocation": {
          "description": "The full resource name of the external storage location.  Currently, only\nGoogle Cloud Storage is supported.  So the data_location should be of the\nform: \/\/storage.googleapis.com\/buckets\/bucket-name\/objects\/object-path.\n\nSee google.datastore.v1beta3.ExportResponse.data_location",
          "type": "string"
        },
        "entityFilter": {
          "description": "Optionally specify which Kinds\/Namespaces are to be imported. If provided,\nthe list must be a subset of the EntityFilter used in creating the export,\notherwise a FAILED_PRECONDITION error will be returned. If no filter is\nspecified then all Entities from the export are imported.",
          "$ref": "EntityFilter"
        }
      }
    },
    "Index": {
      "id": "Index",
      "description": "An index.",
      "type": "object",
      "properties": {
        "projectId": {
          "description": "The ID of the project to which the index belongs.",
          "type": "string"
        },
        "databaseId": {
          "description": "If not empty, the ID of the database to which the index belongs.",
          "type": "string"
        },
        "indexId": {
          "description": "The index's ID within the indexes collection resource.",
          "type": "string"
        },
        "indexDefinition": {
          "description": "The definition of the index.  No two indexes have the same definition.",
          "$ref": "IndexDefinition"
        },
        "state": {
          "description": "Required.",
          "enumDescriptions": [
            "The state is unspecified.",
            "No index data exists.",
            "The index is updated when writing an entity.\nThe index is fully populated from all relevant stored entities.",
            "The index is being built: transitioning from OFF to SERVING.\nThere is an active long-running operation for the index.\nThe index is updated when writing an entity.\nSome index data may exist.",
            "The index is being cleared: transitioning from SERVING to OFF.\nThere is an active long-running operation for the index.\nThe index is not updated when writing an entity.\nSome index data may exist.",
            "The index was being built or cleared, but something went wrong.\nThere is no active long-running operation for the index,\nand the most recently finished long-running operation failed.\nThe index is not updated when writing an entity.\nSome index data may exist."
          ],
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "OFF",
            "SERVING",
            "BUILDING",
            "CLEARING",
            "ERROR"
          ]
        }
      }
    },
    "IndexDefinition": {
      "id": "IndexDefinition",
      "description": "An index definition.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "The kind of entity to index.\nThis field shares the constraints of field Key.PathElement.kind.",
          "type": "string"
        },
        "properties": {
          "description": "A sequence of indexed property definitions.",
          "type": "array",
          "items": {
            "$ref": "IndexedPropertyDefinition"
          }
        }
      }
    },
    "IndexedPropertyDefinition": {
      "id": "IndexedPropertyDefinition",
      "description": "An indexed property definition.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The indexed property's name.\nThis field shares the constraints of the keys of the map in\nfield Entity.properties.\nIf name includes \".\"s, it may be interpreted as a property name path.\nRequired.",
          "type": "string"
        },
        "mode": {
          "description": "The indexed property's mode.",
          "enumDescriptions": [
            "The mode is unspecified.",
            "The property's values are indexed so as to support query by equality.",
            "The property's values are indexed so as to support sequencing in\nascending order and also query by <, >, <=, >=, and =.",
            "The property's values are indexed so as to support sequencing in\ndescending order and also query by <, >, <=, >=, and =.",
            "The property's key values are indexed by ancestor key,\nsupporting query by key ancestry relationship.\nCurrently supported only for property \"__key__\".\nFor example, for an entity with key path \/Blog:7\/Post:11\/Comment:5\nthe indexed ancestor key paths are \/Blog:7, \/Blog:7\/Post:11, and\n\/Blog:7\/Post:11\/Comment:5.\n(The partition ID of all the ancestor keys are the same.)",
            "The property's values are indexed by geographic location,\nsupporting query by location.\n(Only geo point values are indexed; others are ignored.)"
          ],
          "type": "string",
          "enum": [
            "MODE_UNSPECIFIED",
            "UNORDERED",
            "ASCENDING",
            "DESCENDING",
            "KEY_ANCESTRY",
            "GEO"
          ]
        }
      }
    },
    "ListIndexesResponse": {
      "id": "ListIndexesResponse",
      "description": "The response for google.datastore.v1beta3.DatastoreAdmin.ListIndexes.",
      "type": "object",
      "properties": {
        "indexes": {
          "description": "The indexes.",
          "type": "array",
          "items": {
            "$ref": "Index"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "LookupIndexRequest": {
      "id": "LookupIndexRequest",
      "description": "The request for google.datastore.v1beta3.DatastoreAdmin.LookupIndex.",
      "type": "object",
      "properties": {
        "databaseId": {
          "description": "The database id.",
          "type": "string"
        },
        "indexDefinition": {
          "description": "The index definition.",
          "$ref": "IndexDefinition"
        }
      }
    },
    "ListOperationsResponse": {
      "id": "ListOperationsResponse",
      "description": "The response message for Operations.ListOperations.",
      "type": "object",
      "properties": {
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "type": "array",
          "items": {
            "$ref": "Operation"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "properties": {
      }
    },
    "LookupRequest": {
      "id": "LookupRequest",
      "description": "The request for google.datastore.v1beta3.Datastore.Lookup.",
      "type": "object",
      "properties": {
        "databaseId": {
          "description": "If not empty, the ID of the database against which to make the request.",
          "type": "string"
        },
        "readOptions": {
          "description": "The options for this lookup request.",
          "$ref": "ReadOptions"
        },
        "keys": {
          "description": "Keys of entities to look up.",
          "type": "array",
          "items": {
            "$ref": "Key"
          }
        },
        "propertyMask": {
          "description": "The properties to return. Defaults to returning all properties.\nIf this field is set and an entity has a property not referenced in the\nmask, it will not be included in\ngoogle.datastore.v1beta3.LookupResponse.found.entity.properties.\nThe entity's key is always returned.\nIf an google.datastore.v1beta3.Value.entity_value is\nreturned, its key is returned as well.\n\nThe paths in the mask are property paths: dot (`.`) separated property\nnames that can be used to reference properties nested in\ngoogle.datastore.v1beta3.Value.entity_value.\nA property must not reference a value inside an\ngoogle.datastore.v1beta3.Value.array_value.\nNone of these property paths may contain the `__key__` property name.",
          "type": "string",
          "format": "google-fieldmask"
        }
      }
    },
    "ReadOptions": {
      "id": "ReadOptions",
      "description": "The options shared by read requests.",
      "type": "object",
      "properties": {
        "readConsistency": {
          "description": "The non-transactional read consistency to use.\nCannot be set to `STRONG` for global queries.",
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Strong consistency.",
            "Eventual consistency."
          ],
          "type": "string",
          "enum": [
            "READ_CONSISTENCY_UNSPECIFIED",
            "STRONG",
            "EVENTUAL"
          ]
        },
        "transaction": {
          "description": "The transaction in which to read.",
          "type": "string",
          "format": "byte"
        },
        "newTransaction": {
          "description": "Options for beginning a new transaction for this request.\nThe new transaction handle will be returned in the corresponding response\nas either google.datastore.v1beta3.LookupResponse.transaction or\ngoogle.datastore.v1beta3.RunQueryResponse.transaction.",
          "$ref": "TransactionOptions"
        }
      }
    },
    "TransactionOptions": {
      "id": "TransactionOptions",
      "description": "Options for beginning a new transaction.\nTransactions can be created explicitly with calls to\ngoogle.datastore.v1beta3.Datastore.BeginTransaction or implicitly by\nsetting google.datastore.v1beta3.ReadOptions.new_transaction in read\nrequests.",
      "type": "object",
      "properties": {
        "readWrite": {
          "description": "The transaction should allow both reads and writes.",
          "$ref": "ReadWrite"
        },
        "readOnly": {
          "description": "The transaction should only allow reads.",
          "$ref": "ReadOnly"
        }
      }
    },
    "ReadWrite": {
      "id": "ReadWrite",
      "description": "Options specific to read \/ write transactions.",
      "type": "object",
      "properties": {
      }
    },
    "ReadOnly": {
      "id": "ReadOnly",
      "description": "Options specific to read-only transactions.",
      "type": "object",
      "properties": {
      }
    },
    "Key": {
      "id": "Key",
      "description": "A unique identifier for an entity.\nIf a key's partition ID or any of its path kinds or names are\nreserved\/read-only, the key is reserved\/read-only.\nA reserved\/read-only key is forbidden in certain documented contexts.",
      "type": "object",
      "properties": {
        "partitionId": {
          "description": "Entities are partitioned into subsets, currently identified by a project\nID and namespace ID.\nQueries are scoped to a single partition.",
          "$ref": "PartitionId"
        },
        "path": {
          "description": "The entity path.\nAn entity path consists of one or more elements composed of a kind and a\nstring or numerical identifier, which identify entities. The first\nelement identifies a _root entity_, the second element identifies\na _child_ of the root entity, the third element identifies a child of the\nsecond entity, and so forth. The entities identified by all prefixes of\nthe path are called the element's _ancestors_.\n\nAn entity path is always fully complete: *all* of the entity's ancestors\nare required to be in the path along with the entity identifier itself.\nThe only exception is that in some documented cases, the identifier in the\nlast path element (for the entity) itself may be omitted. For example,\nthe last path element of the key of `Mutation.insert` may have no\nidentifier.\n\nA path can never be empty, and a path can have at most 100 elements.",
          "type": "array",
          "items": {
            "$ref": "PathElement"
          }
        }
      }
    },
    "PartitionId": {
      "id": "PartitionId",
      "description": "A partition ID identifies a grouping of entities. The grouping is always\nby project and namespace, however the namespace ID may be empty.\n\nA partition ID contains several dimensions:\nproject ID and namespace ID.\n\nPartition dimensions:\n\n- May be `\"\"`.\n- Must be valid UTF-8 bytes.\n- Must have values that match regex `[A-Za-z\\d\\.\\-_]{1,100}`\nIf the value of any dimension matches regex `__.*__`, the partition is\nreserved\/read-only.\nA reserved\/read-only partition ID is forbidden in certain documented\ncontexts.\n\nForeign partition IDs (in which the project ID does\nnot match the context project ID ) are discouraged.\nReads and writes of foreign partition IDs may fail if the project is not in an active state.",
      "type": "object",
      "properties": {
        "projectId": {
          "description": "The ID of the project to which the entities belong.",
          "type": "string"
        },
        "databaseId": {
          "description": "If not empty, the ID of the database to which the entities\nbelong.",
          "type": "string"
        },
        "namespaceId": {
          "description": "If not empty, the ID of the namespace to which the entities belong.",
          "type": "string"
        }
      }
    },
    "PathElement": {
      "id": "PathElement",
      "description": "A (kind, ID\/name) pair used to construct a key path.\n\nIf either name or ID is set, the element is complete.\nIf neither is set, the element is incomplete.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "The kind of the entity.\nA kind matching regex `__.*__` is reserved\/read-only.\nA kind must not contain more than 1500 bytes when UTF-8 encoded.\nCannot be `\"\"`.",
          "type": "string"
        },
        "id": {
          "description": "The auto-allocated ID of the entity.\nNever equal to zero. Values less than zero are discouraged and may not\nbe supported in the future.",
          "type": "string",
          "format": "int64"
        },
        "name": {
          "description": "The name of the entity.\nA name matching regex `__.*__` is reserved\/read-only.\nA name must not be more than 1500 bytes when UTF-8 encoded.\nCannot be `\"\"`.",
          "type": "string"
        }
      }
    },
    "LookupResponse": {
      "id": "LookupResponse",
      "description": "The response for google.datastore.v1beta3.Datastore.Lookup.",
      "type": "object",
      "properties": {
        "found": {
          "description": "Entities found as `ResultType.FULL` entities. The order of results in this\nfield is undefined and has no relation to the order of the keys in the\ninput.",
          "type": "array",
          "items": {
            "$ref": "EntityResult"
          }
        },
        "missing": {
          "description": "Entities not found as `ResultType.KEY_ONLY` entities. The order of results\nin this field is undefined and has no relation to the order of the keys\nin the input.",
          "type": "array",
          "items": {
            "$ref": "EntityResult"
          }
        },
        "deferred": {
          "description": "A list of keys that were not looked up due to resource constraints. The\norder of results in this field is undefined and has no relation to the\norder of the keys in the input.",
          "type": "array",
          "items": {
            "$ref": "Key"
          }
        },
        "transaction": {
          "description": "The transaction that was started as part of this Lookup request.\nSet only when google.datastore.v1beta3.ReadOptions.begin_transaction\nwas set in google.datastore.v1beta3.LookupRequest.read_options.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "EntityResult": {
      "id": "EntityResult",
      "description": "The result of fetching an entity from Datastore.",
      "type": "object",
      "properties": {
        "entity": {
          "description": "The resulting entity.",
          "$ref": "Entity"
        },
        "version": {
          "description": "The version of the entity, a strictly positive number that monotonically\nincreases with changes to the entity.\n\nThis field is set for `FULL` entity results.\nFor missing entities in\n`LookupResponse`, this is the version of the snapshot that was used to look\nup the entity, and it is always set except for eventually consistent reads.",
          "type": "string",
          "format": "int64"
        },
        "cursor": {
          "description": "A cursor that points to the position after the result entity.\nSet only when the `EntityResult` is part of a `QueryResultBatch` message.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "Entity": {
      "id": "Entity",
      "description": "A Datastore data object.\n\nAn entity is limited to 1 megabyte when stored. That _roughly_\ncorresponds to a limit of 1 megabyte for the serialized form of this\nmessage.",
      "type": "object",
      "properties": {
        "key": {
          "description": "The entity's key.\n\nAn entity must have a key, unless otherwise documented (for example,\nan entity in `Value.entity_value` may have no key).\nAn entity's kind is its key path's last element's kind,\nor null if it has no key.",
          "$ref": "Key"
        },
        "properties": {
          "description": "The entity's properties.\nThe map's keys are property names.\nA property name matching regex `__.*__` is reserved.\nA reserved property name is forbidden in certain documented contexts.\nThe name must not contain more than 500 characters.\nThe name cannot be `\"\"`.",
          "type": "object",
          "additionalProperties": {
            "$ref": "Value"
          }
        }
      }
    },
    "Value": {
      "id": "Value",
      "description": "A message that can hold any of the supported value types and associated\nmetadata.",
      "type": "object",
      "properties": {
        "nullValue": {
          "description": "A null value.",
          "enumDescriptions": [
            "Null value."
          ],
          "type": "string",
          "enum": [
            "NULL_VALUE"
          ]
        },
        "booleanValue": {
          "description": "A boolean value.",
          "type": "boolean"
        },
        "integerValue": {
          "description": "An integer value.",
          "type": "string",
          "format": "int64"
        },
        "doubleValue": {
          "description": "A double value.",
          "type": "number",
          "format": "double"
        },
        "timestampValue": {
          "description": "A timestamp value.\nWhen stored in the Datastore, precise only to microseconds;\nany additional precision is rounded down.",
          "type": "string",
          "format": "google-datetime"
        },
        "keyValue": {
          "description": "A key value.",
          "$ref": "Key"
        },
        "stringValue": {
          "description": "A UTF-8 encoded string value.\nWhen `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes.\nOtherwise, may be set to at least 1,000,000 bytes.",
          "type": "string"
        },
        "blobValue": {
          "description": "A blob value.\nMay have at most 1,000,000 bytes.\nWhen `exclude_from_indexes` is false, may have at most 1500 bytes.\nIn JSON requests, must be base64-encoded.",
          "type": "string",
          "format": "byte"
        },
        "geoPointValue": {
          "description": "A geo point value representing a point on the surface of Earth.",
          "$ref": "LatLng"
        },
        "entityValue": {
          "description": "An entity value.\n\n- May have no key.\n- May have a key with an incomplete key path.\n- May have a reserved\/read-only key.",
          "$ref": "Entity"
        },
        "arrayValue": {
          "description": "An array value.\nCannot contain another array value.\nA `Value` instance that sets field `array_value` must not set fields\n`meaning` or `exclude_from_indexes`.",
          "$ref": "ArrayValue"
        },
        "meaning": {
          "description": "The `meaning` field should only be populated for backwards compatibility.",
          "type": "integer",
          "format": "int32"
        },
        "excludeFromIndexes": {
          "description": "If the value should be excluded from all indexes including those defined\nexplicitly.",
          "type": "boolean"
        }
      }
    },
    "LatLng": {
      "id": "LatLng",
      "description": "An object representing a latitude\/longitude pair. This is expressed as a pair\nof doubles representing degrees latitude and degrees longitude. Unless\nspecified otherwise, this must conform to the\n<a href=\"http:\/\/www.unoosa.org\/pdf\/icg\/2012\/template\/WGS_84.pdf\">WGS84\nstandard<\/a>. Values must be within normalized ranges.\n\nExample of normalization code in Python:\n\n    def NormalizeLongitude(longitude):\n      \"\"\"Wraps decimal degrees longitude to [-180.0, 180.0].\"\"\"\n      q, r = divmod(longitude, 360.0)\n      if r > 180.0 or (r == 180.0 and q <= -1.0):\n        return r - 360.0\n      return r\n\n    def NormalizeLatLng(latitude, longitude):\n      \"\"\"Wraps decimal degrees latitude and longitude to\n      [-180.0, 180.0] and [-90.0, 90.0], respectively.\"\"\"\n      r = latitude % 360.0\n      if r <= 90.0:\n        return r, NormalizeLongitude(longitude)\n      elif r >= 270.0:\n        return r - 360, NormalizeLongitude(longitude)\n      else:\n        return 180 - r, NormalizeLongitude(longitude + 180.0)\n\n    assert 180.0 == NormalizeLongitude(180.0)\n    assert -180.0 == NormalizeLongitude(-180.0)\n    assert -179.0 == NormalizeLongitude(181.0)\n    assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0)\n    assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0)\n    assert (85.0, 180.0) == NormalizeLatLng(95.0, 0.0)\n    assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0)\n    assert (90.0, 10.0) == NormalizeLatLng(90.0, 10.0)\n    assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0)\n    assert (0.0, -170.0) == NormalizeLatLng(-180.0, 10.0)\n    assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0)\n    assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0)\n    assert (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0)",
      "type": "object",
      "properties": {
        "latitude": {
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
          "type": "number",
          "format": "double"
        }
      }
    },
    "ArrayValue": {
      "id": "ArrayValue",
      "description": "An array value.",
      "type": "object",
      "properties": {
        "values": {
          "description": "Values in the array.\nThe order of this array may not be preserved if it contains a mix of\nindexed and unindexed values.",
          "type": "array",
          "items": {
            "$ref": "Value"
          }
        }
      }
    },
    "RunQueryRequest": {
      "id": "RunQueryRequest",
      "description": "The request for google.datastore.v1beta3.Datastore.RunQuery.",
      "type": "object",
      "properties": {
        "databaseId": {
          "description": "If not empty, the ID of the database against which to make the request.",
          "type": "string"
        },
        "partitionId": {
          "description": "Entities are partitioned into subsets, identified by a partition ID.\nQueries are scoped to a single partition.\nThis partition ID is normalized with the standard default context\npartition ID.",
          "$ref": "PartitionId"
        },
        "readOptions": {
          "description": "The options for this query.",
          "$ref": "ReadOptions"
        },
        "query": {
          "description": "The query to run.",
          "$ref": "Query"
        },
        "gqlQuery": {
          "description": "The GQL query to run.",
          "$ref": "GqlQuery"
        },
        "propertyMask": {
          "description": "The properties to return.\nThis field must not be set for a projection query.\n\nSee google.datastore.v1beta3.LookupRequest.property_mask.",
          "type": "string",
          "format": "google-fieldmask"
        }
      }
    },
    "Query": {
      "id": "Query",
      "description": "A query for entities.",
      "type": "object",
      "properties": {
        "projection": {
          "description": "The projection to return. Defaults to returning all properties.",
          "type": "array",
          "items": {
            "$ref": "Projection"
          }
        },
        "kind": {
          "description": "The kinds to query (if empty, returns entities of all kinds).\nCurrently at most 1 kind may be specified.",
          "type": "array",
          "items": {
            "$ref": "KindExpression"
          }
        },
        "filter": {
          "description": "The filter to apply.",
          "$ref": "Filter"
        },
        "order": {
          "description": "The order to apply to the query results (if empty, order is unspecified).",
          "type": "array",
          "items": {
            "$ref": "PropertyOrder"
          }
        },
        "distinctOn": {
          "description": "The properties to make distinct. The query results will contain the first\nresult for each distinct combination of values for the given properties\n(if empty, all results are returned).",
          "type": "array",
          "items": {
            "$ref": "PropertyReference"
          }
        },
        "startCursor": {
          "description": "A starting point for the query results. Query cursors are\nreturned in query result batches.",
          "type": "string",
          "format": "byte"
        },
        "endCursor": {
          "description": "An ending point for the query results. Query cursors are\nreturned in query result batches.",
          "type": "string",
          "format": "byte"
        },
        "offset": {
          "description": "The number of results to skip. Applies before limit, but after all other\nconstraints. Optional. Must be >= 0 if specified.",
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "description": "The maximum number of results to return. Applies after all other\nconstraints. Optional.\nUnspecified is interpreted as no limit.\nMust be >= 0 if specified.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Projection": {
      "id": "Projection",
      "description": "A representation of a property in a projection.",
      "type": "object",
      "properties": {
        "property": {
          "description": "The property to project.",
          "$ref": "PropertyReference"
        }
      }
    },
    "PropertyReference": {
      "id": "PropertyReference",
      "description": "A reference to a property relative to the kind expressions.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the property.\nIf name includes \".\"s, it may be interpreted as a property name path.",
          "type": "string"
        }
      }
    },
    "KindExpression": {
      "id": "KindExpression",
      "description": "A representation of a kind.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the kind.",
          "type": "string"
        }
      }
    },
    "Filter": {
      "id": "Filter",
      "description": "A holder for any type of filter.",
      "type": "object",
      "properties": {
        "compositeFilter": {
          "description": "A composite filter.",
          "$ref": "CompositeFilter"
        },
        "propertyFilter": {
          "description": "A filter on a property.",
          "$ref": "PropertyFilter"
        },
        "stContainsFilter": {
          "description": "A filter that selects geo points within a region.",
          "$ref": "StContainsFilter"
        }
      }
    },
    "CompositeFilter": {
      "id": "CompositeFilter",
      "description": "A filter that merges multiple other filters using the given operator.",
      "type": "object",
      "properties": {
        "op": {
          "description": "The operator for combining multiple filters.",
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "The results are required to satisfy each of the combined filters."
          ],
          "type": "string",
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "AND"
          ]
        },
        "filters": {
          "description": "The list of filters to combine.\nMust contain at least one filter.",
          "type": "array",
          "items": {
            "$ref": "Filter"
          }
        }
      }
    },
    "PropertyFilter": {
      "id": "PropertyFilter",
      "description": "A filter on a specific property.",
      "type": "object",
      "properties": {
        "property": {
          "description": "The property to filter by.",
          "$ref": "PropertyReference"
        },
        "op": {
          "description": "The operator to filter by.",
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Less than.",
            "Less than or equal.",
            "Greater than.",
            "Greater than or equal.",
            "Equal.",
            "Has ancestor."
          ],
          "type": "string",
          "enum": [
            "OPERATOR_UNSPECIFIED",
            "LESS_THAN",
            "LESS_THAN_OR_EQUAL",
            "GREATER_THAN",
            "GREATER_THAN_OR_EQUAL",
            "EQUAL",
            "HAS_ANCESTOR"
          ]
        },
        "value": {
          "description": "The value to compare the property to.",
          "$ref": "Value"
        }
      }
    },
    "StContainsFilter": {
      "id": "StContainsFilter",
      "description": "A filter that selects geo point values that are within a given region.",
      "type": "object",
      "properties": {
        "property": {
          "description": "The property to filter by.",
          "$ref": "PropertyReference"
        },
        "containedIn": {
          "description": "A region within which the property's value should be contained.",
          "$ref": "GeoRegion"
        }
      }
    },
    "GeoRegion": {
      "id": "GeoRegion",
      "description": "A region on the surface of the Earth.",
      "type": "object",
      "properties": {
        "rectangle": {
          "description": "A rectangular region.",
          "$ref": "Rectangle"
        },
        "circle": {
          "description": "A circular region.",
          "$ref": "Circle"
        }
      }
    },
    "Rectangle": {
      "id": "Rectangle",
      "description": "A \"rectangle\" on the surface of the Earth, defined as the area between two\nmeridians and two parallels.",
      "type": "object",
      "properties": {
        "southwest": {
          "description": "The southwest point of the rectangle.",
          "$ref": "LatLng"
        },
        "northeast": {
          "description": "The northeast point of the rectangle.\nIts latitude must be not less than that of the southwest point.",
          "$ref": "LatLng"
        }
      }
    },
    "Circle": {
      "id": "Circle",
      "description": "A \"circle\" on the surface of the Earth, defined as the area within a\ncertain geographical distance of a point.",
      "type": "object",
      "properties": {
        "center": {
          "description": "The center of the circle.",
          "$ref": "LatLng"
        },
        "radiusMeters": {
          "description": "The \"radius\" of the circle, in meters.\nMust be greater or equal to zero.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "PropertyOrder": {
      "id": "PropertyOrder",
      "description": "The desired order for a specific property.",
      "type": "object",
      "properties": {
        "property": {
          "description": "The property to order by.",
          "$ref": "PropertyReference"
        },
        "direction": {
          "description": "The direction to order by. Defaults to `ASCENDING`.",
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Ascending.",
            "Descending."
          ],
          "type": "string",
          "enum": [
            "DIRECTION_UNSPECIFIED",
            "ASCENDING",
            "DESCENDING"
          ]
        }
      }
    },
    "GqlQuery": {
      "id": "GqlQuery",
      "description": "A [GQL query](https:\/\/cloud.google.com\/datastore\/docs\/apis\/gql\/gql_reference).",
      "type": "object",
      "properties": {
        "queryString": {
          "description": "A string of the format described\n[here](https:\/\/cloud.google.com\/datastore\/docs\/apis\/gql\/gql_reference).",
          "type": "string"
        },
        "allowLiterals": {
          "description": "When false, the query string must not contain any literals and instead\nmust bind all values. For example,\n`SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while\n`SELECT * FROM Kind WHERE a = @value` is.",
          "type": "boolean"
        },
        "namedBindings": {
          "description": "For each non-reserved named binding site in the query string,\nthere must be a named parameter with that name,\nbut not necessarily the inverse.\nKey must match regex `A-Za-z_$*`, must not match regex\n`__.*__`, and must not be `\"\"`.",
          "type": "object",
          "additionalProperties": {
            "$ref": "GqlQueryParameter"
          }
        },
        "positionalBindings": {
          "description": "Numbered binding site @1 references the first numbered parameter,\neffectively using 1-based indexing, rather than the usual 0.\nFor each binding site numbered i in `query_string`,\nthere must be an i-th numbered parameter.\nThe inverse must also be true.",
          "type": "array",
          "items": {
            "$ref": "GqlQueryParameter"
          }
        }
      }
    },
    "GqlQueryParameter": {
      "id": "GqlQueryParameter",
      "description": "A binding parameter for a GQL query.",
      "type": "object",
      "properties": {
        "value": {
          "description": "A value parameter.",
          "$ref": "Value"
        },
        "cursor": {
          "description": "A query cursor. Query cursors are returned in query\nresult batches.",
          "type": "string",
          "format": "byte"
        },
        "geoRegion": {
          "description": "Geographical region.",
          "$ref": "GeoRegion"
        }
      }
    },
    "RunQueryResponse": {
      "id": "RunQueryResponse",
      "description": "The response for google.datastore.v1beta3.Datastore.RunQuery.",
      "type": "object",
      "properties": {
        "batch": {
          "description": "A batch of query results (always present).",
          "$ref": "QueryResultBatch"
        },
        "query": {
          "description": "The parsed form of the `GqlQuery` from the request, if it was set.",
          "$ref": "Query"
        },
        "transaction": {
          "description": "The transaction that was started as part of this RunQuery request.\nSet only when google.datastore.v1beta3.ReadOptions.begin_transaction\nwas set in google.datastore.v1beta3.RunQueryRequest.read_options.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "QueryResultBatch": {
      "id": "QueryResultBatch",
      "description": "A batch of results produced by a query.",
      "type": "object",
      "properties": {
        "skippedResults": {
          "description": "The number of results skipped, typically because of an offset.",
          "type": "integer",
          "format": "int32"
        },
        "skippedCursor": {
          "description": "A cursor that points to the position after the last skipped result.\nWill be set when `skipped_results` != 0.",
          "type": "string",
          "format": "byte"
        },
        "entityResultType": {
          "description": "The result type for every entity in `entity_results`.",
          "enumDescriptions": [
            "Unspecified. This value is never used.",
            "The key and properties.",
            "A projected subset of properties. The entity may have no key.",
            "Only the key."
          ],
          "type": "string",
          "enum": [
            "RESULT_TYPE_UNSPECIFIED",
            "FULL",
            "PROJECTION",
            "KEY_ONLY"
          ]
        },
        "entityResults": {
          "description": "The results for this batch.",
          "type": "array",
          "items": {
            "$ref": "EntityResult"
          }
        },
        "endCursor": {
          "description": "A cursor that points to the position after the last result in the batch.",
          "type": "string",
          "format": "byte"
        },
        "moreResults": {
          "description": "The state of the query after the current batch.",
          "enumDescriptions": [
            "Unspecified. This value is never used.",
            "There may be additional batches to fetch from this query.",
            "The query is finished, but there may be more results after the limit.",
            "The query is finished, but there may be more results after the end cursor.",
            "The query has been exhausted."
          ],
          "type": "string",
          "enum": [
            "MORE_RESULTS_TYPE_UNSPECIFIED",
            "NOT_FINISHED",
            "MORE_RESULTS_AFTER_LIMIT",
            "MORE_RESULTS_AFTER_CURSOR",
            "NO_MORE_RESULTS"
          ]
        },
        "snapshotVersion": {
          "description": "The version number of the snapshot this batch was returned from.\nThis applies to the range of results from the query's `start_cursor` (or\nthe beginning of the query if no cursor was given) to this batch's\n`end_cursor` (not the query's `end_cursor`).\n\nIn a single transaction, subsequent query result batches for the same query\ncan have a greater snapshot version number. Each batch's snapshot version\nis valid for all preceding batches.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "BeginTransactionRequest": {
      "id": "BeginTransactionRequest",
      "description": "The request for google.datastore.v1beta3.Datastore.BeginTransaction.",
      "type": "object",
      "properties": {
        "databaseId": {
          "description": "If not empty, the ID of the database against which to make the request.",
          "type": "string"
        },
        "transactionOptions": {
          "description": "Options for a new transaction.",
          "$ref": "TransactionOptions"
        }
      }
    },
    "BeginTransactionResponse": {
      "id": "BeginTransactionResponse",
      "description": "The response for google.datastore.v1beta3.Datastore.BeginTransaction.",
      "type": "object",
      "properties": {
        "transaction": {
          "description": "The transaction identifier (always present).",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "CommitRequest": {
      "id": "CommitRequest",
      "description": "The request for google.datastore.v1beta3.Datastore.Commit.",
      "type": "object",
      "properties": {
        "databaseId": {
          "description": "If not empty, the ID of the database against which to make the request.",
          "type": "string"
        },
        "mode": {
          "description": "The type of commit to perform. Defaults to `TRANSACTIONAL`.",
          "enumDescriptions": [
            "Unspecified. This value must not be used.",
            "Transactional: The mutations are either all applied, or none are applied.\nLearn about transactions [here](https:\/\/cloud.google.com\/datastore\/docs\/concepts\/transactions).",
            "Non-transactional: The mutations may not apply as all or none."
          ],
          "type": "string",
          "enum": [
            "MODE_UNSPECIFIED",
            "TRANSACTIONAL",
            "NON_TRANSACTIONAL"
          ]
        },
        "transaction": {
          "description": "The identifier of the transaction associated with the commit. A\ntransaction identifier is returned by a call to\nBeginTransaction.",
          "type": "string",
          "format": "byte"
        },
        "singleUseTransaction": {
          "description": "Options for beginning a new transaction for this request.\nThe transaction is committed when the request completes. If specified,\ngoogle.datastore.v1beta3.TransactionOptions.mode must be\ngoogle.datastore.v1beta3.TransactionOptions.ReadWrite.",
          "$ref": "TransactionOptions"
        },
        "mutations": {
          "description": "The mutations to perform.\n\nWhen mode is `TRANSACTIONAL`, mutations affecting a single entity are\napplied in order. The following sequences of mutations affecting a single\nentity are not permitted in a single `Commit` request:\n\n- `insert` followed by `insert`\n- `update` followed by `insert`\n- `upsert` followed by `insert`\n- `delete` followed by `update`\n\nWhen mode is `NON_TRANSACTIONAL`, no two mutations may affect a single\nentity.",
          "type": "array",
          "items": {
            "$ref": "Mutation"
          }
        }
      }
    },
    "Mutation": {
      "id": "Mutation",
      "description": "A mutation to apply to an entity.",
      "type": "object",
      "properties": {
        "insert": {
          "description": "The entity to insert. The entity must not already exist.\nThe entity key's final path element may be incomplete.",
          "$ref": "Entity"
        },
        "update": {
          "description": "The entity to update. The entity must already exist.\nMust have a complete key path.",
          "$ref": "Entity"
        },
        "upsert": {
          "description": "The entity to upsert. The entity may or may not already exist.\nThe entity key's final path element may be incomplete.",
          "$ref": "Entity"
        },
        "delete": {
          "description": "The key of the entity to delete. The entity may or may not already exist.\nMust have a complete key path and must not be reserved\/read-only.",
          "$ref": "Key"
        },
        "baseVersion": {
          "description": "The version of the entity that this mutation is being applied to. If this\ndoes not match the current version on the server, the mutation conflicts.",
          "type": "string",
          "format": "int64"
        },
        "propertyMask": {
          "description": "The properties to write in this mutation.\nThis field is ignored for `delete`.\n\nIf the entity already exists, only properties referenced in the mask are\nupdated, others are left untouched.\nProperties referenced in the mask but not in the entity are deleted.\nProperties not referenced in the mask may not be set in the entity.\n\nThe paths in the mask follow the same rules as specified in\ngoogle.datastore.v1beta3.LookupRequest.property_mask.\nAdditionally, none of these property paths may contain a\ngoogle.datastore.v1beta3.Entity.properties.",
          "type": "string",
          "format": "google-fieldmask"
        }
      }
    },
    "CommitResponse": {
      "id": "CommitResponse",
      "description": "The response for google.datastore.v1beta3.Datastore.Commit.",
      "type": "object",
      "properties": {
        "mutationResults": {
          "description": "The result of performing the mutations.\nThe i-th mutation result corresponds to the i-th mutation in the request.",
          "type": "array",
          "items": {
            "$ref": "MutationResult"
          }
        },
        "indexUpdates": {
          "description": "The number of index entries updated during the commit, or zero if none were\nupdated.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MutationResult": {
      "id": "MutationResult",
      "description": "The result of applying a mutation.",
      "type": "object",
      "properties": {
        "key": {
          "description": "The automatically allocated key.\nSet only when the mutation allocated a key.",
          "$ref": "Key"
        },
        "version": {
          "description": "The version of the entity on the server after processing the mutation. If\nthe mutation doesn't change anything on the server, then the version will\nbe the version of the current entity or, if no entity is present, a version\nthat is strictly greater than the version of any previous entity and less\nthan the version of any possible future entity.",
          "type": "string",
          "format": "int64"
        },
        "conflictDetected": {
          "description": "Whether a conflict was detected for this mutation. Always false when a\nconflict detection strategy field is not set in the mutation.",
          "type": "boolean"
        }
      }
    },
    "RollbackRequest": {
      "id": "RollbackRequest",
      "description": "The request for google.datastore.v1beta3.Datastore.Rollback.",
      "type": "object",
      "properties": {
        "databaseId": {
          "description": "If not empty, the ID of the database against which to make the request.",
          "type": "string"
        },
        "transaction": {
          "description": "The transaction identifier, returned by a call to\ngoogle.datastore.v1beta3.Datastore.BeginTransaction.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "RollbackResponse": {
      "id": "RollbackResponse",
      "description": "The response for google.datastore.v1beta3.Datastore.Rollback\n(an empty message).",
      "type": "object",
      "properties": {
      }
    },
    "AllocateIdsRequest": {
      "id": "AllocateIdsRequest",
      "description": "The request for google.datastore.v1beta3.Datastore.AllocateIds.",
      "type": "object",
      "properties": {
        "databaseId": {
          "description": "If not empty, the ID of the database against which to make the request.",
          "type": "string"
        },
        "keys": {
          "description": "A list of keys with incomplete key paths for which to allocate IDs.\nNo key may be reserved\/read-only.",
          "type": "array",
          "items": {
            "$ref": "Key"
          }
        }
      }
    },
    "AllocateIdsResponse": {
      "id": "AllocateIdsResponse",
      "description": "The response for google.datastore.v1beta3.Datastore.AllocateIds.",
      "type": "object",
      "properties": {
        "keys": {
          "description": "The keys specified in the request (in the same order), each with\nits key path completed with a newly allocated ID.",
          "type": "array",
          "items": {
            "$ref": "Key"
          }
        }
      }
    },
    "WatchRequest": {
      "id": "WatchRequest",
      "description": "The request for google.datastore.v1beta3.DatastoreWatcher.Watch",
      "type": "object",
      "properties": {
        "databaseId": {
          "description": "Database ID against which to make the request.",
          "type": "string"
        },
        "targets": {
          "description": "The set of watcher targets to include in the stream.\nchanges will be returned with\nserver assigned `target_ids` in the same order as the targets are specified\nhere.",
          "type": "array",
          "items": {
            "$ref": "WatchTarget"
          }
        }
      }
    },
    "WatchTarget": {
      "id": "WatchTarget",
      "description": "A specification of a set of entities to watch.",
      "type": "object",
      "properties": {
        "partitionId": {
          "description": "The partition id to watch.",
          "$ref": "PartitionId"
        },
        "targetId": {
          "description": "A previously assigned target id. Used to preserve target ids\nwhen restarting a stream. All targets with previously assigned target ids\nmust be added before any new targets.",
          "type": "integer",
          "format": "int32"
        },
        "query": {
          "description": "The query to watch.",
          "$ref": "Query"
        },
        "gqlQuery": {
          "description": "The GQL query to watch.",
          "$ref": "GqlQuery"
        },
        "resumeToken": {
          "description": "A resume token from a stream containing an identical watch target.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "WatchChange": {
      "id": "WatchChange",
      "description": "A change to a set of targets being watched.\nUsually a change to an individual entity,\nbut sometimes a change to the set of entities being watched.\n\nIf a change was requested (for example removing a target) but rejected,\na change will be returned with\n`change_type=NO_CHANGE`, `target_ids=<relevant ids>`, and `cause=<error>`.\n.",
      "type": "object",
      "properties": {
        "noChange": {
          "description": "No change has occurred. Supports providing an updated\n`resume_token` or returning an error.",
          "enumDescriptions": [
            "Null value."
          ],
          "type": "string",
          "enum": [
            "NULL_VALUE"
          ]
        },
        "entity": {
          "description": "The most recent state of an entity that matches the given `target_ids`.",
          "$ref": "EntityResult"
        },
        "entityRemoved": {
          "description": "An entity no longer matches the given `target_ids`. Only `entity.key` and\n`version` are populated.",
          "$ref": "EntityResult"
        },
        "filter": {
          "description": "A filter to apply to the *set* of entities previously returned for the\ngiven `target_ids`. Returned when entities may no longer match the given\n`target_ids` but the exact keys are unknown.",
          "$ref": "ExistenceFilter"
        },
        "targetChange": {
          "description": "The targets associate with this stream have changed.\nThe affected targets are listed in `target_ids`.",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "TARGET_CHANGE_UNSPECIFIED",
            "TARGET_ADDED",
            "TARGET_REMOVED"
          ]
        },
        "continued": {
          "description": "If true, more changes are needed to construct a consistent snapshot.",
          "type": "boolean"
        },
        "resumeToken": {
          "description": "A token that provides a compact representation of all the changes that\nhave been received by the caller up to this point (including this one)\nthat can be used to resume the stream. May not be set on every change.\nOnly valid for the targets specified in `target_ids`.",
          "type": "string",
          "format": "byte"
        },
        "targetIds": {
          "description": "The set of targets to which this change applies. When empty, the change\napplies to all targets.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "cause": {
          "description": "The error that resulted in this change, if applicable.",
          "$ref": "Status"
        }
      }
    },
    "ExistenceFilter": {
      "id": "ExistenceFilter",
      "description": "An existence filter that must be applied and verified locally to resolve\npossible delete mutations.",
      "type": "object",
      "properties": {
        "strategy": {
          "description": "The strategy used to map a key to the filter bits.",
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "STRATEGY_NOT_SPECIFIED",
            "MURMUR128_MITZ_64"
          ]
        },
        "bits": {
          "description": "The filter bits.",
          "type": "string",
          "format": "byte"
        },
        "hashCount": {
          "description": "The number of hashes used in `bits`.",
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "description": "The total number of keys represented in this filter. Used to detect\nthe presence of false positives.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MultiWatchRequest": {
      "id": "MultiWatchRequest",
      "description": "A request for google.datastore.v1beta3.DatastoreWatcher.MultiWatch",
      "type": "object",
      "properties": {
        "databaseId": {
          "description": "Database ID against which to make the request.",
          "type": "string"
        },
        "addTargets": {
          "description": "TODO(arfuller): Switch to a non-batching API.\nThe set of watch targets to add to this stream.\nchanges will be returned with\nserver assigned `target_ids` in the same order as targets are specified\nhere.",
          "type": "array",
          "items": {
            "$ref": "WatchTarget"
          }
        },
        "removeTargets": {
          "description": "The IDs of watch targets to remove from this stream.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "ExportMetadata": {
      "id": "ExportMetadata",
      "description": "Metadata for Export Operations.",
      "type": "object",
      "properties": {
        "common": {
          "description": "Metadata common to all Datastore Admin Operations.",
          "$ref": "CommonMetadata"
        },
        "entitiesProgress": {
          "description": "An estimate of the number of Entities processed.",
          "$ref": "Progress"
        },
        "bytesProgress": {
          "description": "An estimate of the number of bytes processed.",
          "$ref": "Progress"
        },
        "entityFilter": {
          "description": "Description of which Entities are being exported.",
          "$ref": "EntityFilter"
        },
        "destination": {
          "description": "Location for the export metadata and data files.  This will be the same\nvalue as the google.datastore.v1beta3.ExportRequest.destination field.\nActual files will be nested deeper than this.  The final output location\nis provided in google.datastore.v1beta3.ExportResponse.data_location.",
          "type": "string"
        }
      }
    },
    "CommonMetadata": {
      "id": "CommonMetadata",
      "description": "Metadata common to all Datastore Admin Operations.",
      "type": "object",
      "properties": {
        "startTime": {
          "description": "The time that work began on the Operation.",
          "type": "string",
          "format": "google-datetime"
        },
        "endTime": {
          "description": "The time the Operation ended, either successfully or otherwise.",
          "type": "string",
          "format": "google-datetime"
        },
        "operationType": {
          "description": "The type of the operation.  Can be used as a filter in\nListOperationsRequest.",
          "enumDescriptions": [
            "Unspecified.",
            "Export.",
            "Import.",
            "Build an index.",
            "Clear an index."
          ],
          "type": "string",
          "enum": [
            "UNSPECIFIED_TYPE",
            "EXPORT",
            "IMPORT",
            "BUILD_INDEX",
            "CLEAR_INDEX"
          ]
        },
        "labels": {
          "description": "The client-assigned labels which were provided when the Operation was\ncreated.  May also include additional labels.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "cancelling": {
          "description": "True if the Operation is currently being cancelled.  Will only be set after\nthe cancellation request was received, but before the Operation is done.\nSo the state transitions are:\n1) done=false, cancelling=false\n2) done=false, cancelling=true\n3) done=true, cancelling=false",
          "type": "boolean"
        }
      }
    },
    "Progress": {
      "id": "Progress",
      "description": "Measures the progress of a particular metric.",
      "type": "object",
      "properties": {
        "workCompleted": {
          "description": "Note that this may be greater than work_estimated.",
          "type": "string",
          "format": "int64"
        },
        "workEstimated": {
          "description": "An estimate of how much work needs to be performed.  May be zero if the\nwork estimate is unavailable.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ExportResponse": {
      "id": "ExportResponse",
      "description": "The response for google.datastore.v1beta3.DatastoreAdmin.Export.",
      "type": "object",
      "properties": {
        "dataLocation": {
          "description": "Location of the output files. This can be used to begin an import into\nCloud Datastore (this Project or another Project).  See\ngoogle.datastore.v1beta3.ImportRequest.data_location.  Only present if\nthe Operation completed successfully.\n\nThis location will be nested deeper than the initial\ngoogle.datastore.v1beta3.ExportRequest.destination in order to support\nmultiple Exports to the same destination without conflict.",
          "type": "string"
        }
      }
    },
    "ImportMetadata": {
      "id": "ImportMetadata",
      "description": "Metadata for Import operations.",
      "type": "object",
      "properties": {
        "common": {
          "description": "Metadata common to all Datastore Admin Operations.",
          "$ref": "CommonMetadata"
        },
        "entitiesProgress": {
          "description": "An estimate of the number of Entities processed.",
          "$ref": "Progress"
        },
        "bytesProgress": {
          "description": "An estimate of the number of bytes processed.",
          "$ref": "Progress"
        },
        "entityFilter": {
          "description": "Description of which Entities are being imported.",
          "$ref": "EntityFilter"
        },
        "dataLocation": {
          "description": "The location that we are importing from.",
          "type": "string"
        }
      }
    },
    "UpdateIndexMetadata": {
      "id": "UpdateIndexMetadata",
      "description": "Metadata for build index operations.",
      "type": "object",
      "properties": {
        "common": {
          "description": "Metadata common to all Datastore Admin Operations.",
          "$ref": "CommonMetadata"
        },
        "indexId": {
          "description": "The format matches that of Index.index_id.",
          "type": "string"
        },
        "indexDefinition": {
          "description": "The index definition.  Handy for filtering.",
          "$ref": "IndexDefinition"
        }
      }
    }
  },
  "resources": {
    "projects": {
      "methods": {
        "export": {
          "id": "datastore.projects.export",
          "path": "v1beta3/projects/{projectId}:export",
          "flatPath": "v1beta3/projects/{projectId}:export",
          "httpMethod": "POST",
          "description": "Exports a copy of all or a subset of Entities from a Google Cloud Datastore\nProject to another storage system, such as Google Cloud Storage. Recent\nupdates to Entities may not be reflected in the export. The export occurs\nin the background and its progress can be monitored and managed via the\nOperation resource that is created.  The output of an export may only be\nused once the associated Operation is done. If an export Operation is\ncancelled before completion it may leave partial data behind in Google\nCloud Storage.",
          "parameters": {
            "projectId": {
              "description": "Project ID against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "projectId"
          ],
          "request": {
            "$ref": "ExportRequest"
          },
          "response": {
            "$ref": "Operation"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "import": {
          "id": "datastore.projects.import",
          "path": "v1beta3/projects/{projectId}:import",
          "flatPath": "v1beta3/projects/{projectId}:import",
          "httpMethod": "POST",
          "description": "Imports Entities into a Google Cloud Datastore Project. Existing Entities\nwith the same key are overwritten. The import occurs in the background and\nits progress can be monitored and managed via the Operation resource that\nis created.  If an Import Operation is cancelled, it is possible that a\nsubset of the data has already been imported to the Datastore.",
          "parameters": {
            "projectId": {
              "description": "Project ID against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "projectId"
          ],
          "request": {
            "$ref": "ImportRequest"
          },
          "response": {
            "$ref": "Operation"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "lookup": {
          "id": "datastore.projects.lookup",
          "path": "v1beta3/projects/{projectId}:lookup",
          "flatPath": "v1beta3/projects/{projectId}:lookup",
          "httpMethod": "POST",
          "description": "Looks up entities by key.",
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "projectId"
          ],
          "request": {
            "$ref": "LookupRequest"
          },
          "response": {
            "$ref": "LookupResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "runQuery": {
          "id": "datastore.projects.runQuery",
          "path": "v1beta3/projects/{projectId}:runQuery",
          "flatPath": "v1beta3/projects/{projectId}:runQuery",
          "httpMethod": "POST",
          "description": "Queries for entities.",
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "projectId"
          ],
          "request": {
            "$ref": "RunQueryRequest"
          },
          "response": {
            "$ref": "RunQueryResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "beginTransaction": {
          "id": "datastore.projects.beginTransaction",
          "path": "v1beta3/projects/{projectId}:beginTransaction",
          "flatPath": "v1beta3/projects/{projectId}:beginTransaction",
          "httpMethod": "POST",
          "description": "Begins a new transaction.",
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "projectId"
          ],
          "request": {
            "$ref": "BeginTransactionRequest"
          },
          "response": {
            "$ref": "BeginTransactionResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "commit": {
          "id": "datastore.projects.commit",
          "path": "v1beta3/projects/{projectId}:commit",
          "flatPath": "v1beta3/projects/{projectId}:commit",
          "httpMethod": "POST",
          "description": "Commits a transaction, optionally creating, deleting or modifying some\nentities.",
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "projectId"
          ],
          "request": {
            "$ref": "CommitRequest"
          },
          "response": {
            "$ref": "CommitResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "rollback": {
          "id": "datastore.projects.rollback",
          "path": "v1beta3/projects/{projectId}:rollback",
          "flatPath": "v1beta3/projects/{projectId}:rollback",
          "httpMethod": "POST",
          "description": "Rolls back a transaction.",
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "projectId"
          ],
          "request": {
            "$ref": "RollbackRequest"
          },
          "response": {
            "$ref": "RollbackResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "allocateIds": {
          "id": "datastore.projects.allocateIds",
          "path": "v1beta3/projects/{projectId}:allocateIds",
          "flatPath": "v1beta3/projects/{projectId}:allocateIds",
          "httpMethod": "POST",
          "description": "Allocates IDs for the given keys, which is useful for referencing an entity\nbefore it is inserted.",
          "parameters": {
            "projectId": {
              "description": "The ID of the project against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "projectId"
          ],
          "request": {
            "$ref": "AllocateIdsRequest"
          },
          "response": {
            "$ref": "AllocateIdsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "watch": {
          "id": "datastore.projects.watch",
          "path": "v1beta3/projects/{projectId}:watch",
          "flatPath": "v1beta3/projects/{projectId}:watch",
          "httpMethod": "POST",
          "description": "Watch changes to the results of a given set of queries.",
          "parameters": {
            "projectId": {
              "description": "Project ID against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "projectId"
          ],
          "request": {
            "$ref": "WatchRequest"
          },
          "response": {
            "$ref": "WatchChange"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        },
        "multiWatch": {
          "id": "datastore.projects.multiWatch",
          "path": "v1beta3/projects/{projectId}:multiWatch",
          "flatPath": "v1beta3/projects/{projectId}:multiWatch",
          "httpMethod": "POST",
          "description": "Watch changes to the results of a dynamically changeable set of queries.",
          "parameters": {
            "projectId": {
              "description": "Project ID against which to make the request.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "projectId"
          ],
          "request": {
            "$ref": "MultiWatchRequest"
          },
          "response": {
            "$ref": "WatchChange"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/datastore"
          ]
        }
      }
      ,
      "resources": {
        "indexes": {
          "methods": {
            "update": {
              "id": "datastore.projects.indexes.update",
              "path": "v1beta3/projects/{projectId}/indexes/{+indexId}",
              "flatPath": "v1beta3/projects/{projectId}/indexes/{indexesId}",
              "httpMethod": "PUT",
              "description": "Updates an index's state.\nThe input index must specify a (project_id, index_id) tuple\nor an index definition (but not both), and a new state.\nThis new state must be SERVING or OFF.\nThe state of the key index and the kind index cannot be updated.\nIf the index is already in the requested state, does nothing and returns\na successful but unnamed operation.  Otherwise:\nReturns an unfinished operation.\n- If the new state is SERVING, sets the index's state to BUILDING and the\n    result operation's field metadata.common.operation_type is BUILD_INDEX.\n- If the new state is OFF, sets the index's state to CLEARING and the\n   result operation's field metadata.common.operation_type is CLEAR_INDEX.\nOnce the operation finishes,\nif it is successful the index's state is the new state,\nand otherwise the index's state is ERROR.\nThe result operation's field response is of type google.protobuf.Empty.\nThe result operation's field metadata is of type UpdateIndexMetadata.",
              "parameters": {
                "projectId": {
                  "description": "The ID of the project to which the index belongs.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "indexId": {
                  "description": "The index's ID within the indexes collection resource.",
                  "location": "path",
                  "required": true,
                  "pattern": "^[^\/]*$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId",
                "indexId"
              ],
              "request": {
                "$ref": "Index"
              },
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            },
            "list": {
              "id": "datastore.projects.indexes.list",
              "path": "v1beta3/projects/{projectId}/indexes",
              "flatPath": "v1beta3/projects/{projectId}/indexes",
              "httpMethod": "GET",
              "description": "Lists the indexes that match the specified filters.\nOnly lists indexes that are not in their initial state.",
              "parameters": {
                "projectId": {
                  "description": "The project id.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "databaseId": {
                  "description": "The database id.",
                  "location": "query",
                  "type": "string"
                },
                "filter": {
                  "description": "The standard List filter.\nThe filter expression may filter only on definition.kind, eg\n'(definition.kind == \"User\") or (definition.kind == \"Widget\")'.",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "description": "The standard List page size.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "The standard List page token.",
                  "location": "query",
                  "type": "string",
                  "format": "byte"
                }
              },
              "parameterOrder": [
                "projectId"
              ],
              "response": {
                "$ref": "ListIndexesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            },
            "get": {
              "id": "datastore.projects.indexes.get",
              "path": "v1beta3/projects/{projectId}/indexes/{+indexId}",
              "flatPath": "v1beta3/projects/{projectId}/indexes/{indexesId}",
              "httpMethod": "GET",
              "description": "Gets an index.",
              "parameters": {
                "projectId": {
                  "description": "The project id.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "indexId": {
                  "description": "The format matches that of Index.index_id.",
                  "location": "path",
                  "required": true,
                  "pattern": "^[^\/]*$",
                  "type": "string"
                },
                "databaseId": {
                  "description": "The database id.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId",
                "indexId"
              ],
              "response": {
                "$ref": "Index"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            },
            "lookup": {
              "id": "datastore.projects.indexes.lookup",
              "path": "v1beta3/projects/{projectId}/indexes:lookup",
              "flatPath": "v1beta3/projects/{projectId}/indexes:lookup",
              "httpMethod": "POST",
              "description": "Looks up an index by definition.",
              "parameters": {
                "projectId": {
                  "description": "The project id.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectId"
              ],
              "request": {
                "$ref": "LookupIndexRequest"
              },
              "response": {
                "$ref": "Index"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            }
          }
        },
        "operations": {
          "methods": {
            "get": {
              "id": "datastore.projects.operations.get",
              "path": "v1beta3/{+name}",
              "flatPath": "v1beta3/projects/{projectsId}/operations/{operationsId}",
              "httpMethod": "GET",
              "description": "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice.",
              "parameters": {
                "name": {
                  "description": "The name of the operation resource.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]*\/operations\/[^\/]*$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            },
            "list": {
              "id": "datastore.projects.operations.list",
              "path": "v1beta3/{+name}",
              "flatPath": "v1beta3/projects/{projectsId}/operations",
              "httpMethod": "GET",
              "description": "Lists operations that match the specified filter in the request. If the\nserver doesn't support this method, it returns `UNIMPLEMENTED`.\n\nNOTE: the `name` binding below allows API services to override the binding\nto use different resource name schemes, such as `users\/*\/operations`.",
              "parameters": {
                "name": {
                  "description": "The name of the operation collection.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]*\/operations$",
                  "type": "string"
                },
                "filter": {
                  "description": "The standard list filter.",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "description": "The standard list page size.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "The standard list page token.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "ListOperationsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            },
            "cancel": {
              "id": "datastore.projects.operations.cancel",
              "path": "v1beta3/{+name}:cancel",
              "flatPath": "v1beta3/projects/{projectsId}/operations/{operationsId}:cancel",
              "httpMethod": "POST",
              "description": "Starts asynchronous cancellation on a long-running operation.  The server\nmakes a best effort to cancel the operation, but success is not\nguaranteed.  If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.  Clients can use\nOperations.GetOperation or\nother methods to check whether the cancellation succeeded or whether the\noperation completed despite cancellation.",
              "parameters": {
                "name": {
                  "description": "The name of the operation resource to be cancelled.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]*\/operations\/[^\/]*$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            },
            "delete": {
              "id": "datastore.projects.operations.delete",
              "path": "v1beta3/{+name}",
              "flatPath": "v1beta3/projects/{projectsId}/operations/{operationsId}",
              "httpMethod": "DELETE",
              "description": "Deletes a long-running operation. This method indicates that the client is\nno longer interested in the operation result. It does not cancel the\noperation. If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.",
              "parameters": {
                "name": {
                  "description": "The name of the operation resource to be deleted.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]*\/operations\/[^\/]*$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/datastore"
              ]
            }
          }
        }
      }
    }
  },
  "basePath": ""
}