{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "containeranalysis:v1alpha1",
  "name": "containeranalysis",
  "canonicalName": "Container Analysis",
  "version": "v1alpha1",
  "revision": "0",
  "title": "Container Analysis API",
  "description": "An API to insert and retrieve annotations on container resources.",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "",
  "protocol": "rest",
  "rootUrl": "https://containeranalysis.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://containeranalysis.googleapis.com/",
  "batchPath": "batch",
  "version_module": "True",
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "bearer_token": {
      "type": "string",
      "description": "OAuth bearer token.",
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "pp": {
      "type": "boolean",
      "description": "Pretty-print response.",
      "default": "true",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "schemas": {
    "Occurrence": {
      "id": "Occurrence",
      "description": "Occurrence includes information about analysis occurrences for an image.\n``",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the occurrence in the form\n\"projects\/{project_id}\/occurrences\/{occurrence_id}\"\n@OutputOnly",
          "type": "string"
        },
        "resourceUrl": {
          "description": "The unique url of the image or container for which the occurrence applies.\nExample: https:\/\/gcr.io\/project\/image@sha256:foo\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "noteName": {
          "description": "An analysis note associated with this image, in the form\n\"providers\/{provider_id}\/notes\/{note_id}\"\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "kind": {
          "description": "This explicitly denotes which of the occurrence details is specified.\nThis field can be used as a filter in list requests.\n@OutputOnly",
          "enumDescriptions": [
            "Unknown",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence  assert build provenance."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS"
          ]
        },
        "vulnerabilityDetails": {
          "description": "Details of a security vulnerability note.",
          "$ref": "VulnerabilityDetails"
        },
        "buildDetails": {
          "description": "Build details for a verifiable build.",
          "$ref": "BuildDetails"
        },
        "remediation": {
          "description": "A description of actions that can be taken to remedy the note",
          "type": "string"
        },
        "createTime": {
          "description": "The time this occurrence was created.\nThis field can be used as a filter in list requests.\n@OutputOnly",
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "The time this occurrence was last updated.\nThis field can be used as a filter in list requests.\n@OutputOnly",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "VulnerabilityDetails": {
      "id": "VulnerabilityDetails",
      "description": "Used by Occurrence to point to where the vulnerability exists and how\nto fix it.",
      "type": "object",
      "properties": {
        "affectedLocation": {
          "description": "The location of the vulnerability.",
          "$ref": "VulnerabilityLocation"
        },
        "fixedLocation": {
          "description": "The location of the available fix for vulnerability.",
          "$ref": "VulnerabilityLocation"
        },
        "type": {
          "description": "The type of package; whether native or non native(ruby gems,\nnode.js packages etc)\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "severity": {
          "description": "The provider assigned Severity of the vulnerability.\nThis field can be used as a filter in list requests.\n@OutputOnly",
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ]
        },
        "cvssScore": {
          "description": "The CVSS score of this vulnerability.\nThis field can be used as a filter in list requests.\n@OutputOnly",
          "type": "number",
          "format": "float"
        }
      }
    },
    "VulnerabilityLocation": {
      "id": "VulnerabilityLocation",
      "description": "The location of the vulnerability",
      "type": "object",
      "properties": {
        "cpeUri": {
          "description": "The cpe_uri in [cpe format] (https:\/\/cpe.mitre.org\/specification\/)\nformat. Examples include distro or storage location for vulnerable jar.\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "package": {
          "description": "The package being described.\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "version": {
          "description": "The version of the package being described.\nThis field can be used as a filter in list requests.",
          "$ref": "Version"
        }
      }
    },
    "Version": {
      "id": "Version",
      "description": "Version contains structured information about the version of the package.\nFor a discussion of this in Debian\/Ubuntu:\nhttp:\/\/serverfault.com\/questions\/604541\/debian-packages-version-convention\nFor a discussion of this in Redhat\/Fedora\/Centos:\nhttp:\/\/blog.jasonantman.com\/2014\/07\/how-yum-and-rpm-compare-versions\/",
      "type": "object",
      "properties": {
        "epoch": {
          "description": "Used to correct mistakes in the version numbering scheme.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The main part of the version name.",
          "type": "string"
        },
        "revision": {
          "description": "The iteration of the package build from the above version.",
          "type": "string"
        }
      }
    },
    "BuildDetails": {
      "id": "BuildDetails",
      "description": "Message encapsulating build provenance details",
      "type": "object",
      "properties": {
        "provenance": {
          "description": "The actual provenance",
          "$ref": "BuildProvenance"
        },
        "provenanceBytes": {
          "description": "Serialized json representation of the provenance, used in generating the\nBuildSignature in the corresponding Result. After verifying the signature,\nprovenance_bytes can be unmarshalled and compared to the provenance to\nconfirm that it is unchanged. String is a base64-encoded representation of\nthe provenance bytes used in the signature.\n\nWe store the serialized form both to avoid ambiguity in how the Provenance\nis marshalled to json as well to prevent incompatibilities with future\nchanges.",
          "type": "string"
        }
      }
    },
    "BuildProvenance": {
      "id": "BuildProvenance",
      "description": "Provenance of a build. Contains all information needed to verify the full\ndetails about the build from source to completion.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the build.",
          "type": "string"
        },
        "projectId": {
          "description": "ID of the project.",
          "type": "string"
        },
        "commands": {
          "description": "Commands requested by the build.",
          "type": "array",
          "items": {
            "$ref": "Command"
          }
        },
        "builtArtifacts": {
          "description": "Output of the build.",
          "type": "array",
          "items": {
            "$ref": "Artifact"
          }
        },
        "createTime": {
          "description": "Time at which the build was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "startTime": {
          "description": "Time at which execution of the build was started.",
          "type": "string",
          "format": "google-datetime"
        },
        "finishTime": {
          "description": "Time at whihc execution of the build was finished.",
          "type": "string",
          "format": "google-datetime"
        },
        "creator": {
          "description": "E-mail address of the user who initiated this build. Note that this was the\nuser's e-mail address at the time the build was initiated; this address may\nnot represent the same end-user for all time.",
          "type": "string"
        },
        "logsBucket": {
          "description": "Google Cloud Storage bucket where logs were written.",
          "type": "string"
        },
        "sourceProvenance": {
          "description": "Details of the Source input to the build.",
          "$ref": "Source"
        },
        "triggerId": {
          "description": "Trigger identifier if the build was triggered automatically; empty if not.",
          "type": "string"
        },
        "buildOptions": {
          "description": "Special options applied to this build. This is a catch-all field where\nbuild providers can enter any desired additional details.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "builderVersion": {
          "description": "Version string of the builder at the time this build was executed.",
          "type": "string"
        }
      }
    },
    "Command": {
      "id": "Command",
      "description": "Command describes a step performed as part of the build pipeline.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the command, as presented on the command line, or if the command is\npackaged as a Docker container, as presented to `docker pull`.",
          "type": "string"
        },
        "env": {
          "description": "Environment variables set before running this Command.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "args": {
          "description": "Command-line arguments used when executing this Command.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dir": {
          "description": "Working directory (relative to project source root) used when running\nthis Command.",
          "type": "string"
        },
        "id": {
          "description": "Optional unique identifier for this Command, used in wait_for to reference\nthis Command as a dependency.",
          "type": "string"
        },
        "waitFor": {
          "description": "The ID(s) of the Command(s) that this Command depends on.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Artifact": {
      "id": "Artifact",
      "description": "Artifact destribes a build product.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the artifact. This may be the path to a binary or jar file, or in\nthe case of a container build, the name used to push the container image to\nGoogle Container Registry, as presented to `docker push`.",
          "type": "string"
        },
        "checksum": {
          "description": "Hash or checksum value of a binary, or Docker Registry 2.0 digest of a\ncontainer.",
          "type": "string"
        },
        "id": {
          "description": "Artifact ID, if any; for container images, this will be a URL by digest\nlike gcr.io\/projectID\/imagename@sha256:123456",
          "type": "string"
        }
      }
    },
    "Source": {
      "id": "Source",
      "description": "Source describes the location of the source used for the build.",
      "type": "object",
      "properties": {
        "storageSource": {
          "description": "If provided, get the source from this location in in Google Cloud\nStorage.",
          "$ref": "StorageSource"
        },
        "repoSource": {
          "description": "If provided, get source from this location in a Cloud Repo.",
          "$ref": "RepoSource"
        },
        "fileHashes": {
          "description": "Hash(es) of the build source, which can be used to verify that the original\nsource integrity was maintained in the build.\n\nThe keys to this map are file paths used as build source and the values\ncontain the hash values for those files.\n\nIf the build source came in a single package such as a gzipped tarfile\n(.tar.gz), the FileHash will be for the single path to that file.",
          "type": "object",
          "additionalProperties": {
            "$ref": "FileHashes"
          }
        }
      }
    },
    "StorageSource": {
      "id": "StorageSource",
      "description": "StorageSource describes the location of the source in an archive file in\nGoogle Cloud Storage.",
      "type": "object",
      "properties": {
        "bucket": {
          "description": "Google Cloud Storage bucket containing source (see [Bucket Name\nRequirements]\n(https:\/\/cloud.google.com\/storage\/docs\/bucket-naming#requirements)).",
          "type": "string"
        },
        "object": {
          "description": "Google Cloud Storage object containing source.",
          "type": "string"
        },
        "generation": {
          "description": "Google Cloud Storage generation for the object.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "RepoSource": {
      "id": "RepoSource",
      "description": "RepoSource describes the location of the source in a Google Cloud Source\nRepository.",
      "type": "object",
      "properties": {
        "projectId": {
          "description": "ID of the project that owns the repo.",
          "type": "string"
        },
        "repoName": {
          "description": "Name of the repo.",
          "type": "string"
        },
        "branchName": {
          "description": "Name of the branch to build.",
          "type": "string"
        },
        "tagName": {
          "description": "Name of the tag to build.",
          "type": "string"
        },
        "commitSha": {
          "description": "Explicit commit SHA to build.",
          "type": "string"
        }
      }
    },
    "FileHashes": {
      "id": "FileHashes",
      "description": "Container message for hashes of byte content of files, used in Source\nmessages to verify integrity of source input to the build.",
      "type": "object",
      "properties": {
        "fileHash": {
          "description": "Collection of file hashes.",
          "type": "array",
          "items": {
            "$ref": "Hash"
          }
        }
      }
    },
    "Hash": {
      "id": "Hash",
      "description": "Container message for hash values.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of hash that was performed.",
          "enumDescriptions": [
            "No hash requested.",
            "A sha256 hash."
          ],
          "type": "string",
          "enum": [
            "NONE",
            "SHA256"
          ]
        },
        "value": {
          "description": "The hash value.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "ListOccurrencesResponse": {
      "id": "ListOccurrencesResponse",
      "description": "Response including listed occurrences.",
      "type": "object",
      "properties": {
        "occurrences": {
          "description": "The occurrences requested",
          "type": "array",
          "items": {
            "$ref": "Occurrence"
          }
        },
        "nextPageToken": {
          "description": "The next pagination token in the List response. It should be used as\npage_token for the following request. An empty value means no more result.",
          "type": "string"
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "properties": {
      }
    },
    "Note": {
      "id": "Note",
      "description": "Note provides a detailed description of a note using information\nfrom the provider of the note.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the note in the form\n\"providers\/{provider_id}\/notes\/{note_id}\"",
          "type": "string"
        },
        "shortDescription": {
          "description": "A one sentence description of this note",
          "type": "string"
        },
        "longDescription": {
          "description": "A detailed description of this note",
          "type": "string"
        },
        "kind": {
          "description": "This explicitly denotes which kind of note is specified.\nThis field can be used as a filter in list requests.\n@OutputOnly",
          "enumDescriptions": [
            "Unknown",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence  assert build provenance."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS"
          ]
        },
        "vulnerabilityType": {
          "description": "A package vulnerability type of note.",
          "$ref": "VulnerabilityType"
        },
        "buildType": {
          "description": "Build provenance type for a verifiable build.",
          "$ref": "BuildType"
        },
        "relatedUrl": {
          "description": "Urls associated with this note",
          "type": "array",
          "items": {
            "$ref": "RelatedUrl"
          }
        },
        "expirationTime": {
          "description": "Time of expiration for this Note, null if Note currently does not\nexpire.",
          "type": "string",
          "format": "google-datetime"
        },
        "createTime": {
          "description": "The time this note was created.\nThis field can be used as a filter in list requests.\n@OutputOnly",
          "type": "string",
          "format": "google-datetime"
        },
        "updateTime": {
          "description": "The time this note was last updated.\nThis field can be used as a filter in list requests.\n@OutputOnly",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "VulnerabilityType": {
      "id": "VulnerabilityType",
      "description": "VulnerabilityType provides metadata about a security vulnerability.",
      "type": "object",
      "properties": {
        "cvssScore": {
          "description": "The CVSS score for this Vulnerability.\nThis field can be used as a filter in list requests.",
          "type": "number",
          "format": "float"
        },
        "severity": {
          "description": "Provider assigned impact of the vulnerability\nThis field can be used as a filter in list requests.",
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ]
        },
        "details": {
          "description": "All information about the package to specifically identify this\nvulnerability. One entry per (version range and cpe_uri) the\npackage vulnerability has manifested in.",
          "type": "array",
          "items": {
            "$ref": "Detail"
          }
        }
      }
    },
    "Detail": {
      "id": "Detail",
      "description": "Identifies all occurences of this vulnerability in the package for a\nspecific distro\/location\nFor example: glibc in cpe:\/o:debian:debian_linux:8 for versions 2.1 - 2.2",
      "type": "object",
      "properties": {
        "cpeUri": {
          "description": "The cpe_uri in [cpe format] (https:\/\/cpe.mitre.org\/specification\/) in\nwhich the vulnerability manifests.  Examples include distro or storage\nlocation for vulnerable jar.\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "package": {
          "description": "The name of the package where the vulnerability was found.\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "minAffectedVersion": {
          "description": "The min version of the package in which the vulnerability exists.\nThis field can be used as a filter in list requests.",
          "$ref": "Version"
        },
        "maxAffectedVersion": {
          "description": "The max version of the package in which the vulnerability exists.\nThis field can be used as a filter in list requests.",
          "$ref": "Version"
        },
        "severity": {
          "description": "The severity (eg: distro assigned severity) for this vulnerability.\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "description": {
          "description": "A vendor-specific description of this note.",
          "type": "string"
        },
        "fixedLocation": {
          "description": "The fix for this specific package version.",
          "$ref": "VulnerabilityLocation"
        }
      }
    },
    "BuildType": {
      "id": "BuildType",
      "description": "Note holding the version of the provider's builder and the signature of\nthe provenance message in linked BuildDetails.",
      "type": "object",
      "properties": {
        "builderVersion": {
          "description": "Version of the builder which produced this Note.\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "signature": {
          "description": "Signature of the build in Occurrences pointing to the Note containing this\nBuilderDetails.",
          "$ref": "BuildSignature"
        }
      }
    },
    "BuildSignature": {
      "id": "BuildSignature",
      "description": "Message encapsulating signature of the verified build",
      "type": "object",
      "properties": {
        "publicKey": {
          "description": "Public key of the builder which can be used to verify that related\nFindings are valid and unchanged. To verify the signature, place the\ncontents of this field into a file (public.pem). The signature field is\nbase64-decoded into its binary representation in signature.bin, and the\nprovenance bytes from BuildDetails are base64-decoded into a binary\nrepresentation in signed.bin. Openssl can then verify the signature:\n'openssl sha256 -verify public.pem -signature signature.bin signed.bin'\n\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "signature": {
          "description": "Signature of the related BuildProvenance, encoded in a base64 string.",
          "type": "string"
        }
      }
    },
    "RelatedUrl": {
      "id": "RelatedUrl",
      "description": "Metadata for any related url information",
      "type": "object",
      "properties": {
        "url": {
          "description": "Specific url to associate with the note",
          "type": "string"
        },
        "label": {
          "description": "Label to describe usage of the url",
          "type": "string"
        }
      }
    },
    "ListNotesResponse": {
      "id": "ListNotesResponse",
      "description": "Response including listed notes.",
      "type": "object",
      "properties": {
        "notes": {
          "description": "The occurrences requested",
          "type": "array",
          "items": {
            "$ref": "Note"
          }
        },
        "nextPageToken": {
          "description": "The next pagination token in the List response. It should be used as\npage_token for the following request. An empty value means no more result.",
          "type": "string"
        }
      }
    },
    "ListNoteOccurrencesResponse": {
      "id": "ListNoteOccurrencesResponse",
      "description": "Response including listed occurrences for a note.",
      "type": "object",
      "properties": {
        "occurrences": {
          "description": "The names of the Occurrences linked to the specified Note for example:\n  \"projects\/{project_id}\/occurrences\/{occurrence_id}\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextPageToken": {
          "description": "Token to receive the next page of notes.",
          "type": "string"
        }
      }
    },
    "SetIamPolicyRequest": {
      "id": "SetIamPolicyRequest",
      "description": "Request message for `SetIamPolicy` method.",
      "type": "object",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of\nthe policy is limited to a few 10s of KB. An empty policy is a\nvalid policy but certain Cloud Platform services (such as Projects)\nmight reject them.",
          "$ref": "Policy"
        }
      }
    },
    "Policy": {
      "id": "Policy",
      "description": "Defines an Identity and Access Management (IAM) policy. It is used to\nspecify access control policies for Cloud Platform resources.\n\n\nA `Policy` consists of a list of `bindings`. A `Binding` binds a list of\n`members` to a `role`, where the members can be user accounts, Google groups,\nGoogle domains, and service accounts. A `role` is a named list of permissions\ndefined by IAM.\n\n**Example**\n\n    {\n      \"bindings\": [\n        {\n          \"role\": \"roles\/owner\",\n          \"members\": [\n            \"user:mike@example.com\",\n            \"group:admins@example.com\",\n            \"domain:google.com\",\n            \"serviceAccount:my-other-app@appspot.gserviceaccount.com\",\n          ]\n        },\n        {\n          \"role\": \"roles\/viewer\",\n          \"members\": [\"user:sean@example.com\"]\n        }\n      ]\n    }\n\nFor a description of IAM and its features, see the\n[IAM developer's guide](https:\/\/cloud.google.com\/iam).",
      "type": "object",
      "properties": {
        "version": {
          "description": "Version of the `Policy`. The default version is 0.",
          "type": "integer",
          "format": "int32"
        },
        "bindings": {
          "description": "Associates a list of `members` to a `role`.\nMultiple `bindings` must not be specified for the same `role`.\n`bindings` with no members will result in an error.",
          "type": "array",
          "items": {
            "$ref": "Binding"
          }
        },
        "auditConfigs": {
          "description": "Specifies audit logging configs for \"data access\".\n\"data access\": generally refers to data reads\/writes and admin reads.\n\"admin activity\": generally refers to admin writes.\n\nNote: `AuditConfig` doesn't apply to \"admin activity\", which always\nenables audit logging.",
          "type": "array",
          "items": {
            "$ref": "AuditConfig"
          }
        },
        "rules": {
          "description": "If more than one rule is specified, the rules are applied in the following\nmanner:\n- All matching LOG rules are always applied.\n- If any DENY\/DENY_WITH_LOG rule matches, permission is denied.\n  Logging will be applied if one or more matching rule requires logging.\n- Otherwise, if any ALLOW\/ALLOW_WITH_LOG rule matches, permission is\n  granted.\n  Logging will be applied if one or more matching rule requires logging.\n- Otherwise, if no rule applies, permission is denied.",
          "type": "array",
          "items": {
            "$ref": "Rule"
          }
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help\nprevent simultaneous updates of a policy from overwriting each other.\nIt is strongly suggested that systems make use of the `etag` in the\nread-modify-write cycle to perform policy updates in order to avoid race\nconditions: An `etag` is returned in the response to `getIamPolicy`, and\nsystems are expected to put that etag in the request to `setIamPolicy` to\nensure that their change will be applied to the same version of the policy.\n\nIf no `etag` is provided in the call to `setIamPolicy`, then the existing\npolicy is overwritten blindly.",
          "type": "string",
          "format": "byte"
        },
        "iamOwned": {

          "type": "boolean"
        }
      }
    },
    "Binding": {
      "id": "Binding",
      "description": "Associates `members` with a `role`.",
      "type": "object",
      "properties": {
        "role": {
          "description": "Role that is assigned to `members`.\nFor example, `roles\/viewer`, `roles\/editor`, or `roles\/owner`.\nRequired",
          "type": "string"
        },
        "members": {
          "description": "Specifies the identities requesting access for a Cloud Platform resource.\n`members` can have the following values:\n\n* `allUsers`: A special identifier that represents anyone who is\n   on the internet; with or without a Google account.\n\n* `allAuthenticatedUsers`: A special identifier that represents anyone\n   who is authenticated with a Google account or a service account.\n\n* `user:{emailid}`: An email address that represents a specific Google\n   account. For example, `alice@gmail.com` or `joe@example.com`.\n\n* `serviceAccount:{emailid}`: An email address that represents a service\n   account. For example, `my-other-app@appspot.gserviceaccount.com`.\n\n* `group:{emailid}`: An email address that represents a Google group.\n   For example, `admins@example.com`.\n\n* `domain:{domain}`: A Google Apps domain name that represents all the\n   users of that domain. For example, `google.com` or `example.com`.\n\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AuditConfig": {
      "id": "AuditConfig",
      "description": "Enables \"data access\" audit logging for a service and specifies a list\nof members that are log-exempted.",
      "type": "object",
      "properties": {
        "service": {
          "description": "Specifies a service that will be enabled for \"data access\" audit\nlogging.\nFor example, `resourcemanager`, `storage`, `compute`.\n`allServices` is a special value that covers all services.",
          "type": "string"
        },
        "exemptedMembers": {
          "description": "Specifies the identities that are exempted from \"data access\" audit\nlogging for the `service` specified above.\nFollows the same format of Binding.members.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Rule": {
      "id": "Rule",
      "description": "A rule to be applied in a Policy.",
      "type": "object",
      "properties": {
        "description": {
          "description": "Human-readable description of the rule.",
          "type": "string"
        },
        "permissions": {
          "description": "A permission is a string of form '<service>.<resource type>.<verb>'\n(e.g., 'storage.buckets.list'). A value of '*' matches all permissions,\nand a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "action": {
          "description": "Required",
          "enumDescriptions": [
            "Default no action.",
            "Matching 'Entries' grant access.",
            "Matching 'Entries' grant access and the caller promises to log\nthe request per the returned log_configs.",
            "Matching 'Entries' deny access.",
            "Matching 'Entries' deny access and the caller promises to log\nthe request per the returned log_configs.",
            "Matching 'Entries' tell IAM.Check callers to generate logs."
          ],
          "type": "string",
          "enum": [
            "NO_ACTION",
            "ALLOW",
            "ALLOW_WITH_LOG",
            "DENY",
            "DENY_WITH_LOG",
            "LOG"
          ]
        },
        "in": {
          "description": "If one or more 'in' clauses are specified, the rule matches if\nthe PRINCIPAL\/AUTHORITY_SELECTOR is in at least one of these entries.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "notIn": {
          "description": "If one or more 'not_in' clauses are specified, the rule matches\nif the PRINCIPAL\/AUTHORITY_SELECTOR is in none of the entries.\nThe format for in and not_in entries is the same as for members in a\nBinding (see google\/iam\/v1\/policy.proto).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "conditions": {
          "description": "Additional restrictions that must be met",
          "type": "array",
          "items": {
            "$ref": "Condition"
          }
        },
        "logConfig": {
          "description": "The config returned to callers of tech.iam.IAM.CheckPolicy for any entries\nthat match the LOG action.",
          "type": "array",
          "items": {
            "$ref": "LogConfig"
          }
        }
      }
    },
    "Condition": {
      "id": "Condition",
      "description": "A condition to be met.",
      "type": "object",
      "properties": {
        "iam": {
          "description": "Trusted attributes supplied by the IAM system.",
          "enumDescriptions": [
            "Default non-attribute.",
            "Either principal or (if present) authority",
            "selector\nAlways the original principal, but making clear"
          ],
          "type": "string",
          "enum": [
            "NO_ATTR",
            "AUTHORITY",
            "ATTRIBUTION"
          ]
        },
        "sys": {
          "description": "Trusted attributes supplied by any service that owns resources and uses\nthe IAM system for access control.",
          "enumDescriptions": [
            "Default non-attribute type",
            "Region of the resource",
            "Service name",
            "Resource name",
            "IP address of the caller"
          ],
          "type": "string",
          "enum": [
            "NO_ATTR",
            "REGION",
            "SERVICE",
            "NAME",
            "IP"
          ]
        },
        "svc": {
          "description": "Trusted attributes discharged by the service.",
          "type": "string"
        },
        "op": {
          "description": "An operator to apply the subject with.",
          "enumDescriptions": [
            "Default no-op.",
            "DEPRECATED. Use IN instead.",
            "DEPRECATED. Use NOT_IN instead.",
            "Set-inclusion check.",
            "Set-exclusion check.",
            "Subject is discharged"
          ],
          "type": "string",
          "enum": [
            "NO_OP",
            "EQUALS",
            "NOT_EQUALS",
            "IN",
            "NOT_IN",
            "DISCHARGED"
          ]
        },
        "value": {
          "description": "DEPRECATED. Use 'values' instead.",
          "type": "string"
        },
        "values": {
          "description": "The objects of the condition. This is mutually exclusive with 'value'.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "LogConfig": {
      "id": "LogConfig",
      "description": "Specifies what kind of log the caller must write\nIncrement a streamz counter with the specified metric and field names.\n\nMetric names should start with a '\/', generally be lowercase-only,\nand end in \"_count\". Field names should not contain an initial slash.\nThe actual exported metric names will have \"\/iam\/policy\" prepended.\n\nField names correspond to IAM request parameters and field values are\ntheir respective values.\n\nAt present the only supported field names are\n   - \"iam_principal\", corresponding to IAMContext.principal;\n   - \"\" (empty string), resulting in one aggretated counter with no field.\n\nExamples:\n  counter { metric: \"\/debug_access_count\"  field: \"iam_principal\" }\n  ==> increment counter \/iam\/policy\/backend_debug_access_count\n                        {iam_principal=[value of IAMContext.principal]}\n\nAt this time we do not support:\n* multiple field names (though this may be supported in the future)\n* decrementing the counter\n* incrementing it by anything other than 1",
      "type": "object",
      "properties": {
        "counter": {
          "description": "Counter options.",
          "$ref": "CounterOptions"
        },
        "dataAccess": {
          "description": "Data access options.",
          "$ref": "DataAccessOptions"
        },
        "cloudAudit": {
          "description": "Cloud audit options.",
          "$ref": "CloudAuditOptions"
        }
      }
    },
    "CounterOptions": {
      "id": "CounterOptions",
      "description": "Options for counters",
      "type": "object",
      "properties": {
        "metric": {
          "description": "The metric to update.",
          "type": "string"
        },
        "field": {
          "description": "The field value to attribute.",
          "type": "string"
        }
      }
    },
    "DataAccessOptions": {
      "id": "DataAccessOptions",
      "description": "Write a Data Access (Gin) log",
      "type": "object",
      "properties": {
      }
    },
    "CloudAuditOptions": {
      "id": "CloudAuditOptions",
      "description": "Write a Cloud Audit log",
      "type": "object",
      "properties": {
      }
    },
    "GetIamPolicyRequest": {
      "id": "GetIamPolicyRequest",
      "description": "Request message for `GetIamPolicy` method.",
      "type": "object",
      "properties": {
      }
    },
    "TestIamPermissionsRequest": {
      "id": "TestIamPermissionsRequest",
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with\nwildcards (such as '*' or 'storage.*') are not allowed. For more\ninformation see\n[IAM Overview](https:\/\/cloud.google.com\/iam\/docs\/overview#permissions).",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TestIamPermissionsResponse": {
      "id": "TestIamPermissionsResponse",
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is\nallowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "occurrences": {
          "methods": {
            "get": {
              "id": "containeranalysis.projects.occurrences.get",
              "path": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "httpMethod": "GET",
              "description": "Returns the requested occurrence",
              "parameters": {
                "projectsId": {
                  "description": "Part of `name`. The name of the occurrence in the form\n\"projects\/{project_id}\/occurrences\/{occurrence_id}\"",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "occurrencesId": {
                  "description": "Part of `name`. See documentation of `projectsId`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectsId",
                "occurrencesId"
              ],
              "response": {
                "$ref": "Occurrence"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "list": {
              "id": "containeranalysis.projects.occurrences.list",
              "path": "v1alpha1/projects/{projectsId}/occurrences",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences",
              "httpMethod": "GET",
              "description": "Lists all occurrences for a given project\/Digest.  Filters can be used on\nthis field to list all digests containing a specific occurrence in a\nproject.",
              "parameters": {
                "projectsId": {
                  "description": "Part of `name`. The name field will contain the projectId for example:\n\"projects\/{project_id}",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "filter": {
                  "description": "The filter expression.",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "description": "Number of notes to return in the list.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectsId"
              ],
              "response": {
                "$ref": "ListOccurrencesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "delete": {
              "id": "containeranalysis.projects.occurrences.delete",
              "path": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "httpMethod": "DELETE",
              "description": "Deletes the given occurrence from the system.",
              "parameters": {
                "projectsId": {
                  "description": "Part of `name`. The name of the occurrence in the form\n\"projects\/{project_id}\/occurrences\/{occurrence_id}\"",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "occurrencesId": {
                  "description": "Part of `name`. See documentation of `projectsId`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectsId",
                "occurrencesId"
              ],
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "create": {
              "id": "containeranalysis.projects.occurrences.create",
              "path": "v1alpha1/projects/{projectsId}/occurrences",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences",
              "httpMethod": "POST",
              "description": "Creates a new occurrence.",
              "parameters": {
                "projectsId": {
                  "description": "Part of `name`. The name of the project.  Should be of the form \"projects\/{project_id}\".",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectsId"
              ],
              "request": {
                "$ref": "Occurrence"
              },
              "response": {
                "$ref": "Occurrence"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "update": {
              "id": "containeranalysis.projects.occurrences.update",
              "path": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "httpMethod": "PUT",
              "description": "Updates an existing occurrence.",
              "parameters": {
                "projectsId": {
                  "description": "Part of `name`. The name of the occurrence.\nShould be of the form \"projects\/{project_id}\/occurrences\/{occurrence_id}\".",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "occurrencesId": {
                  "description": "Part of `name`. See documentation of `projectsId`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectsId",
                "occurrencesId"
              ],
              "request": {
                "$ref": "Occurrence"
              },
              "response": {
                "$ref": "Occurrence"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "getNotes": {
              "id": "containeranalysis.projects.occurrences.getNotes",
              "path": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}/notes",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}/notes",
              "httpMethod": "GET",
              "description": "Gets the note that this occurrence is attached to.",
              "parameters": {
                "projectsId": {
                  "description": "Part of `name`. The name of the occurrence in the form\n\"projects\/{project_id}\/occurrences\/{occurrence_id}\"",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "occurrencesId": {
                  "description": "Part of `name`. See documentation of `projectsId`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectsId",
                "occurrencesId"
              ],
              "response": {
                "$ref": "Note"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "setIamPolicy": {
              "id": "containeranalysis.projects.occurrences.setIamPolicy",
              "path": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:setIamPolicy",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:setIamPolicy",
              "httpMethod": "POST",
              "description": "Sets the access control policy on the specified note or occurrence\nresource.\nRequires \"containeranalysis.notes.setIamPolicy\" or\n\"containeranalysis.occurrences.setIamPolicy\" permission if the resource is\na note or occurrence, respectively.\nAttempting this RPC on a resource without the needed permission will note\nin a PERMISSION_DENIED error.\nAttempting this RPC on a non-existent resource will note in a NOT_FOUND\nerror if the user has list permission on the project, or a\nPERMISSION_DENIED error otherwise.",
              "parameters": {
                "projectsId": {
                  "description": "Part of `resource`. REQUIRED: The resource for which the policy is being specified.\n`resource` is usually specified as a path. For example, a Project\nresource is specified as `projects\/{project}`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "occurrencesId": {
                  "description": "Part of `resource`. See documentation of `projectsId`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectsId",
                "occurrencesId"
              ],
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "response": {
                "$ref": "Policy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "getIamPolicy": {
              "id": "containeranalysis.projects.occurrences.getIamPolicy",
              "path": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:getIamPolicy",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:getIamPolicy",
              "httpMethod": "POST",
              "description": "Gets the access control policy for a note or occurrence resource.\nRequires \"containeranalysis.notes.setIamPolicy\" or\n\"containeranalysis.occurrences.setIamPolicy\" permission if the resource is\na note or occurrence, respectively.\nAttempting this RPC on a resource without the needed permission will note\nin a PERMISSION_DENIED error.\nAttempting this RPC on a non-existent resource will note in a NOT_FOUND\nerror if the user has list permission on the project,\nor a PERMISSION_DENIED error otherwise.",
              "parameters": {
                "projectsId": {
                  "description": "Part of `resource`. REQUIRED: The resource for which the policy is being requested.\n`resource` is usually specified as a path. For example, a Project\nresource is specified as `projects\/{project}`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "occurrencesId": {
                  "description": "Part of `resource`. See documentation of `projectsId`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectsId",
                "occurrencesId"
              ],
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "response": {
                "$ref": "Policy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "testIamPermissions": {
              "id": "containeranalysis.projects.occurrences.testIamPermissions",
              "path": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:testIamPermissions",
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:testIamPermissions",
              "httpMethod": "POST",
              "description": "Returns permissions that a caller has on the specified note or occurrence\nresource.\nRequires list permission on the project (e.g., \"storage.objects.list\" on\nthe containing bucket for testing permission of an object).\nAttempting this RPC on a non-existent resource will note in a NOT_FOUND\nerror if the user has list permission on the project,\nor a PERMISSION_DENIED error otherwise.",
              "parameters": {
                "projectsId": {
                  "description": "Part of `resource`. REQUIRED: The resource for which the policy detail is being requested.\n`resource` is usually specified as a path. For example, a Project\nresource is specified as `projects\/{project}`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "occurrencesId": {
                  "description": "Part of `resource`. See documentation of `projectsId`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "projectsId",
                "occurrencesId"
              ],
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            }
          }
        }
      }
    },
    "providers": {
      "resources": {
        "notes": {
          "methods": {
            "get": {
              "id": "containeranalysis.providers.notes.get",
              "path": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "httpMethod": "GET",
              "description": "Returns the requested occurrence",
              "parameters": {
                "providersId": {
                  "description": "Part of `name`. The name of the occurrence in the form\n\"providers\/{provider_id}\/notes\/{note_id}\"",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "notesId": {
                  "description": "Part of `name`. See documentation of `providersId`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "providersId",
                "notesId"
              ],
              "response": {
                "$ref": "Note"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "list": {
              "id": "containeranalysis.providers.notes.list",
              "path": "v1alpha1/providers/{providersId}/notes",
              "flatPath": "v1alpha1/providers/{providersId}/notes",
              "httpMethod": "GET",
              "description": "Lists all notes for a given project.  Filters can be used on this\nfield to list all notes with a specific parameter.",
              "parameters": {
                "providersId": {
                  "description": "Part of `name`. The name field will contain the projectId for example:\n\"providers\/{provider_id}",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "filter": {
                  "description": "The filter expression.",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "description": "Number of notes to return in the list.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "providersId"
              ],
              "response": {
                "$ref": "ListNotesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "delete": {
              "id": "containeranalysis.providers.notes.delete",
              "path": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "httpMethod": "DELETE",
              "description": "Deletes the given note from the system.",
              "parameters": {
                "providersId": {
                  "description": "Part of `name`. The name of the note in the form\n\"providers\/{provider_id}\/notes\/{note_id}\"",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "notesId": {
                  "description": "Part of `name`. See documentation of `providersId`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "providersId",
                "notesId"
              ],
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "create": {
              "id": "containeranalysis.providers.notes.create",
              "path": "v1alpha1/providers/{providersId}/notes",
              "flatPath": "v1alpha1/providers/{providersId}/notes",
              "httpMethod": "POST",
              "description": "Creates a new note.",
              "parameters": {
                "providersId": {
                  "description": "Part of `name`. The name of the project.\nShould be of the form \"providers\/{provider_id}\".",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "noteId": {
                  "description": "The ID to use for this note.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "providersId"
              ],
              "request": {
                "$ref": "Note"
              },
              "response": {
                "$ref": "Note"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "update": {
              "id": "containeranalysis.providers.notes.update",
              "path": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "httpMethod": "PUT",
              "description": "Updates an existing note.",
              "parameters": {
                "providersId": {
                  "description": "Part of `name`. The name of the note.\nShould be of the form \"providers\/{provider_id}\/notes\/{note_id}\".",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "notesId": {
                  "description": "Part of `name`. See documentation of `providersId`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "providersId",
                "notesId"
              ],
              "request": {
                "$ref": "Note"
              },
              "response": {
                "$ref": "Note"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "setIamPolicy": {
              "id": "containeranalysis.providers.notes.setIamPolicy",
              "path": "v1alpha1/providers/{providersId}/notes/{notesId}:setIamPolicy",
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:setIamPolicy",
              "httpMethod": "POST",
              "description": "Sets the access control policy on the specified note or occurrence\nresource.\nRequires \"containeranalysis.notes.setIamPolicy\" or\n\"containeranalysis.occurrences.setIamPolicy\" permission if the resource is\na note or occurrence, respectively.\nAttempting this RPC on a resource without the needed permission will note\nin a PERMISSION_DENIED error.\nAttempting this RPC on a non-existent resource will note in a NOT_FOUND\nerror if the user has list permission on the project, or a\nPERMISSION_DENIED error otherwise.",
              "parameters": {
                "providersId": {
                  "description": "Part of `resource`. REQUIRED: The resource for which the policy is being specified.\n`resource` is usually specified as a path. For example, a Project\nresource is specified as `projects\/{project}`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "notesId": {
                  "description": "Part of `resource`. See documentation of `providersId`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "providersId",
                "notesId"
              ],
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "response": {
                "$ref": "Policy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "getIamPolicy": {
              "id": "containeranalysis.providers.notes.getIamPolicy",
              "path": "v1alpha1/providers/{providersId}/notes/{notesId}:getIamPolicy",
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:getIamPolicy",
              "httpMethod": "POST",
              "description": "Gets the access control policy for a note or occurrence resource.\nRequires \"containeranalysis.notes.setIamPolicy\" or\n\"containeranalysis.occurrences.setIamPolicy\" permission if the resource is\na note or occurrence, respectively.\nAttempting this RPC on a resource without the needed permission will note\nin a PERMISSION_DENIED error.\nAttempting this RPC on a non-existent resource will note in a NOT_FOUND\nerror if the user has list permission on the project,\nor a PERMISSION_DENIED error otherwise.",
              "parameters": {
                "providersId": {
                  "description": "Part of `resource`. REQUIRED: The resource for which the policy is being requested.\n`resource` is usually specified as a path. For example, a Project\nresource is specified as `projects\/{project}`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "notesId": {
                  "description": "Part of `resource`. See documentation of `providersId`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "providersId",
                "notesId"
              ],
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "response": {
                "$ref": "Policy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "testIamPermissions": {
              "id": "containeranalysis.providers.notes.testIamPermissions",
              "path": "v1alpha1/providers/{providersId}/notes/{notesId}:testIamPermissions",
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:testIamPermissions",
              "httpMethod": "POST",
              "description": "Returns permissions that a caller has on the specified note or occurrence\nresource.\nRequires list permission on the project (e.g., \"storage.objects.list\" on\nthe containing bucket for testing permission of an object).\nAttempting this RPC on a non-existent resource will note in a NOT_FOUND\nerror if the user has list permission on the project,\nor a PERMISSION_DENIED error otherwise.",
              "parameters": {
                "providersId": {
                  "description": "Part of `resource`. REQUIRED: The resource for which the policy detail is being requested.\n`resource` is usually specified as a path. For example, a Project\nresource is specified as `projects\/{project}`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "notesId": {
                  "description": "Part of `resource`. See documentation of `providersId`.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "providersId",
                "notesId"
              ],
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            }
          }
          ,
          "resources": {
            "occurrences": {
              "methods": {
                "list": {
                  "id": "containeranalysis.providers.notes.occurrences.list",
                  "path": "v1alpha1/providers/{providersId}/notes/{notesId}/occurrences",
                  "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}/occurrences",
                  "httpMethod": "GET",
                  "description": "Lists the names of Occurrences linked to a particular Note.",
                  "parameters": {
                    "providersId": {
                      "description": "Part of `name`. The name field will contain the note name for example:\n  \"provider\/{provider_id}\/notes\/{note_id}\"",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "notesId": {
                      "description": "Part of `name`. See documentation of `providersId`.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "filter": {
                      "description": "The filter expression.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "Number of notes to return in the list.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "pageToken": {
                      "description": "Token to provide to skip to a particular spot in the list.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "providersId",
                    "notesId"
                  ],
                  "response": {
                    "$ref": "ListNoteOccurrencesResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "basePath": ""
}